<resources>
    <string name="app_name">PepeTeachesKotlin</string>
    <string name="lesson1">Lesson 1</string>
    <string name="lesson1type">Basic Types</string>

    <string name="lesson2">Lesson 2</string>
    <string name="lesson2type">Packages and Imports</string>

    <string name="lesson3">Lesson 3</string>
    <string name="lesson3type">Control Flow</string>

    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="basicTypes">Basic Types</string>

    <string name="camera_permission_toast">Camera permission is needed to run this application</string>
    <string name="searching_for_surfaces">Searching for surfaces…</string>
    <string name="ar_device_support">This device does not support AR</string>

    <string name="ar_mode">Enter Augmented Reality with your unlocked PEPEs</string>
    <string name="next">Next</string>

    <string name="chapter1_quiz_1">Which of the following is not a valid data type in kotlin?</string>
    <string name="chapter1_quiz_1_a">Val</string> <!--Answer -->
    <string name="chapter1_quiz_1_b">Integer</string>
    <string name="chapter1_quiz_1_c">Collection</string>
    <string name="chapter1_quiz_1_d">String</string>

    <string name="chapter1_quiz_2">Which of the following is a valid way to declare an integer in Kotlin? </string>
    <string name="chapter1_quiz_2_a">let i = 42</string>
    <string name="chapter1_quiz_2_b">var i: int = 42</string>
    <string name="chapter1_quiz_2_c">var i: Int = 42</string> <!--Answer -->
    <string name="chapter1_quiz_2_d">int i = 42</string>

    <string name="chapter1_quiz_3">Which of the following is an invalid range? </string>
    <string name="chapter1_quiz_3_a">val range1 = 1..10</string>
    <string name="chapter1_quiz_3_b">val range2 = \"A\"..\"Z\"</string>
    <string name="chapter1_quiz_3_c">val twoTo20 = 2.rangeTo(20)</string>
    <string name="chapter1_quiz_3_d">None of the above</string> <!--Answer -->

    <string name="chapter1_quiz_4">Which of the following statements about val and var is incorrect</string>
    <string name="chapter1_quiz_4_a">Variables declared with val are final</string> <!--Answer -->
    <string name="chapter1_quiz_4_b">Variables declared with var are final</string>
    <string name="chapter1_quiz_4_c">Variables declared with val cannot be null</string>
    <string name="chapter1_quiz_4_d">None of the above</string>

    <string name="chapter1_quiz_5">What is the correct syntax to convert the String \"42\" to Long in Kotlin</string>
    <string name="chapter1_quiz_5_a">val l: Long = Long.parseInt(\"42\")</string>
    <string name="chapter1_quiz_5_b">val l: Long = (Long)"42"</string>
    <string name="chapter1_quiz_5_c">val l: Long = &lt;Long&gt;"42"</string>
    <string name="chapter1_quiz_5_d">val l: Long = "42".toLong()</string> <!--Answer -->

    <string name="chapter1_lesson_numbers">Numbers</string>
    <string name="chapter1_lesson_numbers_part0">In this chapter, we will learn about the basic data
        types available in Kotlin programming language.</string>
    <string name="chapter1_lesson_numbers_part1">The representation of numbers in Kotlin is pretty similar to Java,
         however, Kotlin does not allow internal conversion of different data types.
        The following table lists different variable lengths for different numbers.</string>
    <string name="chapter1_lesson_numbers_part2_1">In the following example, we will see how Kotlin
        works with different data types.</string>
    <string name="chapter1_lesson_numbers_part2_2">When you run the piece of code as shown previously,
        it will generate the following output.</string>

    <string name="chapter1_lesson_characters">Characters</string>
    <string name="chapter1_lesson_characters_part1">Kotlin represents character using char.
        A character should be declared in a single quote like \'c\'.</string>
    <string name="chapter1_lesson_characters_part2">When you run the piece of code as shown previously,
        it will generate the following output.</string>

    <string name="chapter2_lesson_ifelse">If-Else</string>
    <string name="chapter2_lesson_ifelse_part1">In the previous chapter we have learned about
        different types of data types available in Kotlin system. In this chapter, we will discuss
        different types of control flow mechanism available in the Kotlin.</string>
    <string name="chapter2_lesson_ifelse_part2">Kotlin is a functional language hence like every
        functional language in Kotlin “if” is an expression and not a keyword. The expression \"if\"
        will return a value whenever necessary. Like other programming language. In the following
        example, we will compare two variables and provide the required output accordingly.</string>
    <string name="chapter2_lesson_ifelse_part3">The previous piece of code yields the following output
        as a result. The example also contains another line of code, which depicts
        how to use \"If\" statement as an expression.</string>

    <string name="chapter2_lesson_when">When Statement</string>
    <string name="chapter2_lesson_when_part1">If you are familiar with other programming languages,
        then you might have heard of the term switch statement, which is basically a conditional
        operator when multiple conditions can be applied on a particular variable. \"when\" operator
        matches the variable value against the branch conditions. If it is satisfying the branch
        condition then it will execute the statement inside that scope. In the following example,
        we will learn more about \"when\" in Kotlin.</string>
    <string name="chapter2_lesson_when_part2">The above piece of code yields the following output</string>
    <string name="chapter2_lesson_when_part3">In the previous example, the Kotlin compiler matches the value
        of x with the given branches. If it is not matching any of the branches, then it will execute
        the else part. Practically, when is equivalent to multiple if blocks. Kotlin provides another
        flexibility to the developer, where the developer can provide multiple checks in the same line
        by providing \",\" inside the checks as follows.</string>
    <string name="chapter2_lesson_when_part4">Running the above piece of code would yield the following output</string>

</resources>
